##
# Build and command-line operations containers for your local environment.
#
# Environment variables can be overridden in the .env file.
##
version: '2.1'

services:
  # Container for starting a cli for build commands
  # Usage: docker-compose -f build.yml run --rm cli
  cli:
    extends:
      service: operational
    environment:
      # Enable command line debugging
      PHP_XDEBUG: "true"
      PHP_IDE_CONFIG: "serverName=www.${PROJECT_ROOT}.vm"
    command: /bin/bash

  # Container for running composer in the repo root.
  # Usage: docker-compose -f build.yml run --rm composer <command>
  composer:
    extends:
      service: base
    entrypoint: [ "/init", "composer", "--ansi" ]
    command: ""

  # Container for running drush in the docroot.
  # Usage: docker-compose -f build.yml run --rm drush <command>
  # Where <command> is a direct drush command like cache-rebuild
  drush:
    extends:
      service: operational
    entrypoint: [ "/init", "drush" ]
    working_dir: /var/www/build/html

  # Container for running Drupal Console in the docroot.
  # Usage: docker-compose -f build.yml run --rm drupal <command>
  # Where <command> is a direct drupal command like generate
  # Note: Only works if the project includes Drupal Console as a composer dependency.
  drupal:
    extends:
      service: operational
    entrypoint: [ "/init", "/var/www/vendor/bin/drupal", "--ansi" ]
    working_dir: /var/www/build/html


  # Container to get Pattern Lab compiled, running, and watched from inside the theme folder in one step.
  # Usage: docker-compose -f build.yml run --rm theme
  # Note: For faster file-watching, run: rig watch src/themes/themeName after Pattern Lab builds.
  # You can also pass any argument the gulp command within the theme accepts as an argument here.
  theme:
    extends:
      service: base
    labels:
      com.dnsdock.name: design
      com.dnsdock.image: ${PROJECT_ROOT}
    environment:
      # Tell Particle the host name
      PARTICLE_PL_HOST: "design.${PROJECT_ROOT}.vm:8080"
    entrypoint: [ "/init", "/var/www/bin/theme.sh" ]
    command: ""

  # Container to run npm within the theme folder.
  # Usage: docker-compose -f build.yml run --rm npm install
  npm:
    extends:
      service: operational
    working_dir: /var/www/src/themes/particle
    entrypoint: [ "/init", "npm" ]
    command: ""

  # Container for running grunt in the repo root.
  # Usage: docker-compose -f build.yml run --rm grunt <command>
  grunt:
    extends:
      service: operational
    entrypoint: [ "/init", "grunt" ]

  # Container for running PHPUnit tests.
  # Usage: docker-compose -f build.yml run --rm phpunit <phpunit parameters>
  # E.g. docker-compose -f build.yml run --rm phpunit -c ./core/phpunit.xml.dist ./modules/custom
  phpunit:
    extends:
      service: operational
    entrypoint: [ "/init", "/var/www/vendor/bin/phpunit" ]
    working_dir: /var/www/build/html

  # Operational base service definition for Local environment.
  #
  # Unlike `base`, this layer is functional for application interactions.
  #
  # Other services inherit these settings via the extends property.
  # See https://docs.docker.com/compose/extends/#extending-services
  operational:
    extends:
      service: base
    external_links:
      - ${PROJECT_ROOT}_${DOCKER_ENV}_db:db
    # Unset the bin/bash command used by base and cli.
    command: ""

  # Base service definition for Local environment.
  #
  # This is not a fully operational build container, lacking access to other
  # services such as the database or cache needed to properly interact with the
  # application.
  #
  # Uses for this container include filesystem operations. For example:
  #
  # docker-compose -f build.yml run --rm base 'rm -Rf node_modules'
  #
  # Other services inherit these settings via the extends property.
  # See https://docs.docker.com/compose/extends/#extending-services
  base:
    image: outrigger/build:php71
    network_mode: "bridge"
    entrypoint: [ "/init" ]
    working_dir: /var/www
    command: /bin/bash
    volumes:
      # Use 'rig project sync' to leverage unison-based filesystem for app code.
      # @see <doc-url>
      - rig-sync-volume:/var/www
      # /var/www/src is used here rather than /var/www/build/html to
      # prevent the grunt clean:default task from encountering an error
      # because docker won't let the files directory be removed as the
      # container is using it in its filesystem magic. Since the
      # /var/www/build/html/sites/default item is a symlink it can be
      # successfully cleaned without then needing to touch the files
      # directory. This mount is present so that drush and other build
      # container operations can operate on the files for a site.
      - /data/${PROJECT_ROOT}/${DOCKER_ENV}/files:/var/www/src/sites/default/files
      # By volume mounting project Drush configuration to the user profile the
      # Docker image can carry Drush configuration and commands itself.
      # Would be more clean if this volume mount placed the Drush configuration
      # within the Drupal directory structure.
      - ./env/build/etc/drush:/root/.drush
      # Local backups are managed within the project directory. This varies by
      # platform.
      - ./build/backups:/opt/backups
      # Persist the cache directories associated with various tools.
      # The first volume mount covers: npm, composer, bower, fontconfig, & yarn
      - /data/${PROJECT_ROOT}/cache:/root/.cache
      - /data/${PROJECT_ROOT}/cache/drush:/root/.drush/cache
      - /data/${PROJECT_ROOT}/cache/behat_gherkin:/tmp/behat_gherkin_cache
      # SSH key grants read access to private Git repositories.
      - ~/.ssh/${OUTRIGGER_SSH_KEY:-id_rsa}:/root/.ssh/outrigger.key
      # Preserve BASH history across build container runs.
      - /data/${PROJECT_ROOT}/${DOCKER_ENV}/bash:/root/bash
    labels:
      outrigger.project: ${PROJECT_ROOT}
    environment:
      APP_DOMAIN: www.${PROJECT_ROOT}.vm
      GDT_DOMAIN: www.${PROJECT_ROOT}.vm
      # Check https://hub.docker.com/r/outrigger/build/ for other Node version options.
      NODE_VERSION: 8
      # Allow for pattern lab compilation need detection with reasonable performance from
      # within the build container.
      # See: https://github.com/paulmillr/chokidar/blob/master/README.md#user-content-performance
      CHOKIDAR_USEPOLLING: 1
      # Set to "true" to load xdebug configuration. Note this will cause significant composer
      # performance degradation.
      PHP_XDEBUG: "false"
      # Suppress the loading of grunt-drupal-tasks desktop notification functionality.
      GDT_QUIET: 1
      # Include the DOCKER_ENV so Drupal settings can be aware of environment.
      DOCKER_ENV: ${DOCKER_ENV}
      # Tell Drupal which environment.
      DRUPAL_ENV: "local"
      # Centralized build cache configuration.
      # This might move to the Docker build image.
      NPM_CONFIG_CACHE: /root/.cache/npm
      COMPOSER_CACHE_DIR: /root/.cache/composer

      # PHPUnit variables.
      SIMPLETEST_DB: mysql://admin:admin@db/drupal_octane
      SIMPLETEST_URL: www.${PROJECT_ROOT}.vm
      BROWSERTEST_OUTPUT_DIRECTORY: /tmp

      # Composer variables.
      COMPOSER_DISCARD_CHANGES: 1

volumes:
  # This defines the filesystem synchronization volume used for application
  # code by the web container.
  # @see <doc-url>
  rig-sync-volume:
    name: ${PROJECT_ROOT}-sync
    external: true
